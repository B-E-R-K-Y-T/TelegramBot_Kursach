# This file is my file(BERKYT)


import os
import random

# import apiai
# import json
import telebot

from code.different import config

bot = telebot.TeleBot(config.TOKEN)

if os.path.exists('../../logs'):
    pass
else:
    os.mkdir('../../logs')


def stickers(name=None):
    # –°–Æ–î–ê, –ß–ï–†–ï–ó –ó–ê–ü–Ø–¢–£–Æ, –î–û–ë–ê–í–õ–Ø–ô –°–¢–ò–ö–ï–†–´, –ù–û –¢–û–õ–¨–ö–û, –°–ù–ê–ß–ê–õ–ê –î–û–ë–ê–í–¨ –ò–• –í –ü–ê–ü–ö–£ –° –ü–†–û–ï–ö–¢–û–ú!!!!
    # ------------------------------------------------------------------------------------------------------------------
    list_name_sticker = ['sticker_patriarch_1.webp', 'sticker_patriarch_2.webp',
                         'sticker_putin_1.webp', 'sticker_putin_2.webp']
    # ------------------------------------------------------------------------------------------------------------------
    if len(list_name_sticker) == 0:
        print('Error: [The list is empty!]')
        return open('../../error.webp', 'rb')

    list_file_sticker = []
    for i in range(len(list_name_sticker)):
        try:
            list_file_sticker.append(open(list_name_sticker[i], 'rb'))
        except Exception as e:
            print('Error: [incorrect name file of sticker in "list_name_sticker"! \n\t '
                  'INCORRECT NAME: {0} INDEX: {1} {2}]'.format(list_name_sticker[i], i, e))
            continue

    if name is not None:
        index_sticker = None
        for i in range(len(list_name_sticker)):
            if name == list_name_sticker[i]:
                index_sticker = i
                break
        try:
            return list_file_sticker[index_sticker]
        except Exception as e:
            print('Error: [incorrect sticker! {0}]'.format(e))
            return open('../../error.webp', 'rb')

    return list_file_sticker[random.randint(0, len(list_file_sticker) - 1)]


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_sticker(message.chat.id, stickers())
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n"
                                      "–Ø - <b>{1.first_name}</b>, –∏ —è - —Ä—É—Å—Å–∫–∏–π!"
                     .format(message.from_user, bot.get_me()), parse_mode='html')


@bot.message_handler(content_types=['text'])
def speak(message):
    on = True
    off = False
    text = str(message.text).lower()

    def print_to_chat(output, type_out):
        if type_out != 't' and type_out != 's':
            print('Error: [incorrect argument! Try "s" or "t".]')
            bot.send_message(message.chat.id, 'Error: [incorrect argument! Try "s" or "t".]')
        else:
            if type_out == 't':
                bot.send_message(message.chat.id, output)
            elif type_out == 's':
                bot.send_sticker(message.chat.id, output)

            print('USER_NAME[ ' + str(message.from_user) + '] = ' + str(message.text) + '\n\t' +
                  'BOT[ ' + str(bot.get_me()) + '] = ' + str(output) + '\n',
                  file=open(r'logs/message_{0.first_name}_log.txt'.format(message.from_user), 'a'))

    # –ü–ò–°–ê–¢–¨ –ö–û–î –¢–£–¢:
    # ------------------------------------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------------------------------------

    if message.chat.type == 'private':
        # –í–∫–ª—é—á–∏—Ç—å(on) –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å(off) —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª —è
        default_bot = off
        # –í–∫–ª—é—á–∏—Ç—å(on) –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å(off) —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª —Ç—ã
        custom_bot = on

        # –¢–£–¢ –ù–£–ñ–ù–û –ü–ò–°–ê–¢–¨ –°–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ
        # --------------------------------------------------------------------------------------------------------------
        if custom_bot:
            # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            print_to_chat('Hello! It is custom functional.', 't')
            # –†–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
            print_to_chat(stickers(), 's')
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
            print_to_chat(stickers('sticker_putin_1.webp'), 's')

            # –í–û–ó–ú–û–ñ–ù–´–ï –û–®–ò–ë–ö–ò:
            # –û—à–∏–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            print_to_chat('–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?', '–°–Æ–î–ê –ù–ï–õ–¨–ó–Ø –ü–ò–°–ê–¢–¨ –ù–ò–ß–ï–ì–û, –ö–†–û–ú–ï "t" –∏–ª–∏ "s"!!! –ò–Ω–∞—á–µ, –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞!')
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä
            print_to_chat(stickers('–ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –°–¢–ò–ö–ï–†.webp'), 's')
        # --------------------------------------------------------------------------------------------------------------

        # –ë–ê–ó–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ, –≠–¢–û –¢–ï–ë–ï –î–õ–Ø –ü–†–ò–ú–ï–†–ê
        # --------------------------------------------------------------------------------------------------------------
        if default_bot:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª '–∫–∞–∫ –¥–µ–ª–∞?', —Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –æ—Ç–≤–µ—Ç '–•–æ—Ä–æ—à–æ!'
            if text == '–∫–∞–∫ –¥–µ–ª–∞?':
                print_to_chat('–•–æ—Ä–æ—à–æ!', 't')

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–ø–∏—Å–∞–ª '–∫–∞–∫ –¥–µ–ª–∞?', –Ω–æ –Ω–∞–ø–∏—Å–∞–ª '–ø—Ä–∏–≤–µ—Ç', —Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –æ—Ç–≤–µ—Ç...
            elif text == '–ø—Ä–∏–≤–µ—Ç' or text == 'üëã':

                # –í—Å–µ-—Ç–∞–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–∏–≤–µ—Ç. –í–æ—Ç –º—ã –∏ –≤–Ω—É—Ç—Ä–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ elif
                # –≤–Ω–∏–∑—É –ª–æ–≥–∏–∫–∞ —Ç–∞–∫–∞—è:
                # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50% –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —Å—Ç–∏–∫–µ—Ä–æ–º, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ü—Ä–∏–≤–µ—Ç! üëã"
                # --------------------------------
                if random.randint(0, 1) == 0:
                    # –û—Ç–≤–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º —Å—Ç–∏–∫–µ—Ä–æ–º
                    print_to_chat(stickers(), 's')
                else:
                    # –û—Ç–≤–µ—Ç "–ü—Ä–∏–≤–µ—Ç!"
                    print_to_chat('–ü—Ä–∏–≤–µ—Ç! üëã', 't')
                # --------------------------------

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç—å –∫–∞–∫ - —Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç —Å–ª–æ–≤–æ "—Å—Ç–∏–∫–µ—Ä" –Ω–æ –Ω–µ –Ω–∞–ø–∏—à–µ—Ç —Å–ª–æ–≤–æ "–ø—Ä–∏–≤–µ—Ç" –∏–ª–∏ "–∫–∞–∫ –¥–µ–ª–∞?"
            # —Ç–æ –º—ã –∫–∏–Ω–µ–º –µ–º—É —Å—Ç–∏–∫–µ—Ä
            elif '—Å—Ç–∏–∫–µ—Ä' in text:
                print_to_chat(stickers(), 's')

            # –ï—Å–ª–∏ –º—ã –≤–æ–æ–±—â–µ –Ω–µ —Å–º–æ–≥–ª–∏ —É–≥–∞–¥–∞—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç, —Ç–æ –ø–∏—à–µ–º –µ–º—É —ç—Ç–æ:
            else:
                # –í–æ—Ç —ç—Ç–æ –ø–∏—à–µ–º –µ—Å–ª–∏ –±—ã—Ç—å —Ç–æ—á–Ω—ã–º:
                print_to_chat('–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, '
                              '—Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –≤–ª–æ–∂–∏–ª '
                              '–≤ –º–µ–Ω—è —Ç–∞–∫–∏–µ –∑–Ω–∞–Ω–∏—è üò¢', 't')
        # --------------------------------------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------------------------------------------
    # ------------------------------------------------------------------------------------------------------------------


# RUN BOT
# postgresql.inquiry_to_db("INSERT INTO public.ai (id, id_message, dialogs) values (0002, 02, 'üòé');")
bot.polling(none_stop=True)
